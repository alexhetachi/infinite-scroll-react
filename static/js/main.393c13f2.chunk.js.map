{"version":3,"sources":["actions/types.js","actions/albumActions.js","components/Albums.js","reducers/albumReducers.js","reducers/index.js","store.js","App.js","reportWebVitals.js","index.js"],"names":["FETCH_ALBUMS","x","newData","page","Albums","fetchStateAlbums","props","fetchAlbums","this","className","dataLength","albums","length","next","hasMore","loader","map","album","id","title","url","Component","connect","state","items","dispatch","axios","get","then","data","console","log","type","payload","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAAaA,EAAe,e,iBCExBC,EAAI,EAAGC,EAAU,GACLC,EAAO,E,OCGVC,EAAb,4MAmBEC,iBAAmB,WAGjB,EAAKC,MAAMC,eAtBf,uDAQE,WACEC,KAAKF,MAAMC,gBATf,oBA8BE,WACE,OACE,qBAAKE,UAAU,SAAf,SACE,cAAC,IAAD,CACEC,WAAYF,KAAKF,MAAMK,OAAOC,OAC9BC,KAAML,KAAKH,iBACXS,SAAS,EACTC,OAAQ,4CAJV,SAMGP,KAAKF,MAAMK,OAAOK,KAAI,SAAAC,GAAK,OAE1B,cADA,CACA,iBACI,6BAAKA,EAAMC,KACX,6BAAKD,EAAME,QACX,6BAAKF,EAAMG,MACX,yBAJMH,EAAMC,eAzC5B,GAA4BG,aA0DbC,eAJO,SAAAC,GAAK,MAAG,CAC5BZ,OAAOY,EAAMN,MAAMO,SAGmB,CAAEjB,YD3Df,kBAAM,SAAAkB,GAEpB,IAANxB,EACCyB,IAAMC,IAAN,4DAA+DxB,EAA/D,mBALI,KAMHyB,MAAK,SAAAjB,GACJT,EAAUS,EAAOkB,KACjBC,QAAQC,IAAI,aAAc7B,GAC1BuB,EAAS,CACLO,KAAMhC,EACNiC,QAAStB,EAAOkB,OAEpB1B,GAAc,EACdF,EAAE,KAGJyB,IAAMC,IAAN,4DAA+DxB,EAA/D,mBAjBI,KAkBHyB,MAAK,SAAAjB,GAEJT,EAAO,sBAAOA,GAAP,YAAkBS,EAAOkB,OAEhCJ,EAAS,CACLO,KAAMhC,EACNiC,QAAS/B,IAEfC,GAAc,QCmCPmB,CAA0ClB,G,uBC9DnD8B,EAAa,CACfV,MAAM,ICEKW,kBAAgB,CAC3BlB,MDCW,WAAwC,IAA3BM,EAA0B,uDAApBW,EAAaE,EAAO,uCAClD,OAAOA,EAAOJ,MACV,KAAKhC,EACL,OAAO,2BACAuB,GADP,IAEIC,MAAMY,EAAOH,UAEjB,QACA,OAAOV,MEVTc,EAAW,CAACC,KAaHC,EATHC,YACRC,EANe,GAQfC,YACIC,IAAe,WAAf,EAAmBN,KCaZO,E,4JAfb,WACE,OACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,8BACE,mCACE,uEACA,uBACA,cAAC,EAAD,e,GAZMlB,aCMHwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.393c13f2.chunk.js","sourcesContent":["export const FETCH_ALBUMS = 'FETCH_ALBUMS';","import { FETCH_ALBUMS } from './types';\r\nimport axios from 'axios';\r\nlet x = 0, newData = [];\r\nlet count = 10, page = 1;\r\n\r\nexport const fetchAlbums = () => dispatch => {\r\n\r\n    if(x === 0){\r\n        axios.get(`https://jsonplaceholder.typicode.com/photos?_page=${page}&_limit=${count}`)\r\n        .then(albums => {\r\n          newData = albums.data\r\n          console.log('First x=0:'+ newData)\r\n          dispatch({\r\n              type: FETCH_ALBUMS,\r\n              payload: albums.data\r\n          })\r\n          page = page + 1\r\n          x=1\r\n      })\r\n    }else{\r\n        axios.get(`https://jsonplaceholder.typicode.com/photos?_page=${page}&_limit=${count}`)\r\n        .then(albums =>{\r\n        //   console.log('Old:'+ newData.length)\r\n          newData = [...newData,...albums.data]\r\n        //   console.log('New:'+ newData.length)\r\n          dispatch({\r\n              type: FETCH_ALBUMS,\r\n              payload: newData\r\n          }) \r\n        page = page + 1\r\n      })\r\n    }\r\n      \r\n      \r\n};","import React, { Component } from 'react';\r\n// import axios from 'axios';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport { connect } from 'react-redux';\r\nimport { fetchAlbums } from '../actions/albumActions';\r\n\r\nexport class Albums extends Component {\r\n  // state = {\r\n  //   albums: [],\r\n  //   count: 10,\r\n  //   // start: 1,\r\n  //   page: 1,\r\n  // };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchAlbums()\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   const { count, page } = this.state;\r\n  //   axios\r\n  //   .get(`https://jsonplaceholder.typicode.com/photos?_page=${page}&_limit=${count}`)\r\n  //     .then(res => this.setState({ albums: res.data }));\r\n  // }\r\n\r\n  fetchStateAlbums = () => {\r\n    // const { count, page } = this.state;\r\n    // this.setState({ page: page + 1 });\r\n    this.props.fetchAlbums()\r\n    // axios\r\n    // .get(`https://jsonplaceholder.typicode.com/photos?_page=${page}&_limit=${count}`)\r\n    //   .then(res =>\r\n    //     this.setState({ albums: this.state.albums.concat(res.data) })\r\n    //   );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='albums'>\r\n        <InfiniteScroll\r\n          dataLength={this.props.albums.length}\r\n          next={this.fetchStateAlbums}\r\n          hasMore={true}\r\n          loader={<h4>Loading...</h4>}\r\n        >\r\n          {this.props.albums.map(album => (\r\n            // <Album key={albums.id} albums={albums} />\r\n            <div key={album.id}>\r\n                <h3>{album.id}</h3>\r\n                <h3>{album.title}</h3>\r\n                <h3>{album.url}</h3>\r\n                <hr/>\r\n            </div>\r\n          ))}\r\n        </InfiniteScroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps=state=>({\r\n  albums:state.album.items,\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchAlbums })(Albums);\r\n// export default Albums;\r\n","import { FETCH_ALBUMS } from '../actions/types';\r\n\r\nconst initialState={\r\n    items:[],\r\n}\r\n\r\n\r\nexport default function fun(state=initialState,action){\r\n    switch(action.type){\r\n        case FETCH_ALBUMS:\r\n        return {\r\n            ...state,\r\n            items:action.payload\r\n        };\r\n        default:\r\n        return state;\r\n    };\r\n}","import {combineReducers} from 'redux';\r\nimport albumReducer from './albumReducers';\r\n// import errorReducer from './errorReducer';\r\n// import authReducer from './authReducer';\r\n\r\nexport default combineReducers({\r\n    album:albumReducer,\r\n    // error:errorReducer,\r\n    // auth:authReducer\r\n});","import {createStore,applyMiddleware,compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index';\r\n\r\nconst initialState={};\r\nconst middleware=[thunk];\r\n\r\n  \r\n\r\nconst store=createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n);\r\n\r\nexport default store;","import React, { Component } from 'react';\nimport Albums from './components/Albums';\nimport {Provider} from 'react-redux';\nimport store from './store';\n// import {loadUser} from './actions/authActions'\n\nclass App extends Component {\n  // componentDidMount(){\n  //   store.dispatch(loadUser())\n  // }\n  \n  render() {\n    return (\n      <Provider store={store}>\n        <div>\n          <center>\n            <h1>Infinite scroll using React and Redux</h1>\n            <hr/>\n            <Albums/>\n          </center>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}